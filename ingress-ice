#!/bin/sh

# ingress-ice start script by Nikitakun
# From version 2.2 you don't need to edit anything. Just launch this script from console ( $ chmod +x ingress-ice&&./ingress-ice )
FILE="$HOME/.ingress_ice"
COUNT=""
DIALOG=${DIALOG=dialog}
echo_will_help() {
	echo "Ingress ICE"
	echo ""
	echo "Usage:"
	echo "  ingress-ice [-c 100] [-i settings.txt]"
	echo "  ingress-ice -h | -?"
	echo "  ingress-ice -r"
        echo "  ingress-ice -a"
	echo ""
	echo "Options:"
	echo "  -h -?        Show this help"
	echo "  -r           Rewrite existing config file with a new one"
        echo "  -a           Show authors"
	echo "  -c <count>   Take <count> screenshots"
	echo "  -i <file>    Read settings from <file> or create config if not exists"
	echo ""
	echo "Please visit http://ingress.divshot.io/ or http://github.com/nibgd/ingress-ice for additional help\n"
	exit;
}
exit_ice() {
	$DIALOG --title "Ingress Ice" --backtitle "Exit" --clear \
	        --yesno "Do you wish to exit?" 8 24
	case $? in
   		0) clear;exit;;
    		1) ;;
		255) ;;
	esac
}
empty_ice() {
	$DIALOG --title "Error" --backtitle "ERROR" --msgbox "This value cannot be empty" 8 32;
}
user_input() {
	clear
	while true; do
		tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
		trap "rm -f $tempfile" 0 1 2 5 15
	
		$DIALOG --backtitle "Step 1 of 6" --title "Location Link" --clear \
		        --inputbox "To get your location link:\n  1) Go to http://ingress.com/intel\n  2) Scroll the map to your location and zoom\n  3) Click the [Link] button on the right top of the screen and copy that link\n  4) [Shift]+[Insert] to paste" 12 52 2> $tempfile
	
		retval=$?
		
		case $retval in
		  0) LINK=`cat $tempfile`
		     [ -z $LINK ] && empty_ice || break;;
		  1) exit_ice;;
		  255) exit_ice;;
		esac
	done
	clear
	while true; do
		echo "Your Google login: "
		read EMAIL
		[ -z "$EMAIL" ] && echo "Cannot be blank." || break;
	done
	while true; do
		echo "Your Google password: (not shown) "
		stty -echo
		read PASSWORD
		stty echo
		[ -z "$PASSWORD" ] && echo "\nCannot be blank." || break;
	done
	clear
	echo "Delay between screenshots in seconds: ([ENTER] for default (120)) "
	read DELAY
	clear
	echo "WARNING: This feature is unstable. If it doesn't work well (screenshots may appear blank or contain a part of COMM box), set a higher delay or set minimal portal level to 1 and maximum to 8 (start this script with -r parameter to reconfigure)"
	echo "\nMinimal portal level: (1) "
	read MIN_LEVEL
	echo "\nMaximum portal level: (8) "
	read MAX_LEVEL
	clear
	echo "Screenshots' width in pixels: (900) "
	read WIDTH
	echo "\nScreenshots' height: (500) "
	read HEIGHT
	clear
	echo "Number of screenshots to take, '0' for infinity: (0) "
	read NUMBER
	
	DELAY=${DELAY:-'120'}
	MIN_LEVEL=${MIN_LEVEL:-'1'}
	MAX_LEVEL=${MAX_LEVEL:-'8'}
	WIDTH=${WIDTH:-'900'}
	HEIGHT=${HEIGHT:-'500'}
	NUMBER=${NUMBER:-'0'}
	clear
	echo "Google login: $EMAIL"
	echo "Portals level from $MIN_LEVEL to $MAX_LEVEL"
	echo "Take $NUMBER (0 = infinity) screenshots $WIDTH x $HEIGHT every $DELAY seconds"
	echo "\nAre options entered correct? (y/n)"
	while true; do
	    read yn
	    case $yn in
	        [Yy]* ) echo "Writing to file... ($1)"; echo "$EMAIL $PASSWORD $LINK $MIN_LEVEL $MAX_LEVEL $DELAY $WIDTH $HEIGHT ./ $NUMBER 3" > $1 && echo "Config file created successfully."; break;;
	        [Nn]* ) user_input $FILE; break;;
	        * ) echo "Please answer y(es) or n(o).";;
	    esac
	done
}

OPTIND=1
NFILE=""
COUNT=""

while getopts "h?rc:ai:" opt; do
    case "$opt" in
    	h|\?)  echo_will_help;;
    	r)     user_input $FILE; break;;
    	i)     NFILE=$OPTARG;;
	a)     echo "Ingress ICE (Distributed under the MIT License)\n\nAuthors:\n  Nikitakun (http://github.com/nibogd) @ni_bogd\n";exit;;
	c)     COUNT=$OPTARG;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [ -n "$NFILE" ]
then
	if [ -f "$NFILE" ]
	then
		clear
		if [  "x$COUNT" != "x" ]
		then
			echo "Existing config file found ($FILE). Starting ice...(Take $COUNT screenshots)"
			set `cat $FILE`
			ARGS="$1 $2 $3 $4 $5 $6 $7 $8 $9 $COUNT $11"
			./phantomjs ice.js $ARGS; exit;
		else
			echo "Existing config file found ($FILE). Starting ice..."
			ARGS=`cat $FILE`
			./phantomjs ice.js $ARGS; exit;
		fi
	else
		$DIALOG --title "Ingress Ice" --clear \
	        	--yesno "Config file for Ice not found. Create one?" 6 36
		case $? in
   			0) user_input $FILE; break;;
    			1) dialog --title "Error" --msgbox "Config file is mandatory. Exiting..." 6 32;clear;exit;;
			255) exit;;
		esac
	fi
fi

if [ -f "$FILE" ]
then
	clear
	if [  "x$COUNT" != "x" ]
	then
		echo "Existing config file found ($FILE). Starting ice...(Take $COUNT screenshot(s))"
		set `cat $FILE`
		ARGS="$1 $2 $3 $4 $5 $6 $7 $8 $9 $COUNT $11"
		./phantomjs ice.js $ARGS; exit;
	else
		echo "Existing config file found ($FILE). Starting ice..."
		ARGS=`cat $FILE`
		./phantomjs ice.js $ARGS; exit;
	fi
else
	$DIALOG --backtitle "Automatic screenshooter for ingress intel map" --title "Ingress Ice" --clear \
	        --yesno "Config file for Ice not found. Create one?" 8 36
	case $? in
   		0) user_input $FILE; break;;
    		1) clear;echo "Config file is mandatory. Exiting...";exit;; #dialog --title "Error" --msgbox "Config file is mandatory. Exiting..." 6 32;clear;exit;;
		255) exit;;
	esac
fi
